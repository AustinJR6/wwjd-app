rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // 🔐 User profile document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // 📊 Subcollections used for tracking
    match /{subCollection}/{docId} {
      allow read: if isSignedIn() && request.auth.uid == docId &&
        subCollection in ['confessionalSessions', 'journalEntries', 'dailyChallenges'];
    }

    // 📓 Journal entries
    match /journalEntries/{userId}/entries/{entryId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // 🕊️ Religion chat history
    match /religionChats/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // 🕊️ Temporary religion chat history
    match /tempReligionChat/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // 🙏 Temporary confessional sessions
    match /tempConfessionalSessions/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // ✅ Completed challenges
    match /completedChallenges/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // ⏳ Free ask cooldown
    match /freeAsk/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // 📬 Subscription status
    match /subscriptions/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // 📸 Challenge proof submissions
    match /challengeProofs/{docId} {
      allow create: if isSignedIn();
    }

    // 🏢 Organization documents
    match /organizations/{orgId} {
      allow read: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid in resource.data.admins;
      allow create: if false;
    }

    // 🌍 Static lookup: Regions (lowercase IDs)
    match /regions/{regionId} {
      allow get, list: if isSignedIn();
      // Allow incrementing userCount only
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount']) &&
        request.resource.data.userCount is number;
    }

    // 📖 Static lookup: Religion (capitalized IDs)
    match /religion/{religionId} {
      allow get, list: if isSignedIn();
      // Allow incrementing userCount only
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount']) &&
        request.resource.data.userCount is number;
    }

  }
}

