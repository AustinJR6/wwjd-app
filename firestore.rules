rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ── Helpers ────────────────────────────────────────────────────────────────
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isSubscribed(userId) {
      // Safe inside rules; does not require external read permission
      return isOwner(userId) &&
        get(/databases/$(database)/documents/users/$(userId)).data.isSubscribed == true;
    }

    // ── Users root doc and subcollections ─────────────────────────────────────
    match /users/{userId} {
      // Your current behavior: any authed user can read a profile doc
      allow read: if isSignedIn();

      // CREATE: owner only, may NOT include protected fields
      allow create: if isOwner(userId)
                    && !('subscription' in request.resource.data)
                    && !('entitlementsSnapshot' in request.resource.data);

      // UPDATE: owner only, may NOT change protected fields
      allow update: if isOwner(userId)
                    && !request.resource.data.diff(resource.data)
                         .changedKeys()
                         .hasAny(['subscription','entitlementsSnapshot']);

      // DELETE: owner only
      allow delete: if isOwner(userId);

      // Active challenge under user
      match /activeChallenge/{docId} {
        allow read, write: if isOwner(userId);
      }

      // Transactions: client read, server-only write
      match /transactions/{transactionId} {
        allow read:  if isOwner(userId);
        allow write: if false;
      }

      // Long-term memories / session summaries (server-only writes)
      match /memories/{memoryId} {
        allow read:  if isOwner(userId);
        allow write: if false;
      }
      match /session_summaries/{summaryId} {
        allow read:  if isOwner(userId);
        allow write: if false;
      }

      // Goals / preferences (client can write)
      match /goals/{goalId} {
        allow read, write: if isOwner(userId);
      }
      match /preferences/{prefId} {
        allow read, write: if isOwner(userId);
      }

      // Extended profile
      match /profileExtended/{docId} {
        allow read, write: if isOwner(userId);
      }

      // ✅ ReligionAI chat messages directly under the user
      // Owner can read (get + list via queries). Writes require subscription.
      match /religionChats/{msgId} {
        allow get, list:  if isOwner(userId);
        allow create, update, delete: if isSubscribed(userId);
      }
    }

    // ── Journal entries ───────────────────────────────────────────────────────
    match /journalEntries/{userId} {
      // Owner can read/write the container doc if you use it
      allow read, write: if isOwner(userId);

      match /entries/{entryId} {
        // Explicit get + list for queries
        allow get, list:  if isOwner(userId);
        allow create, update, delete: if isOwner(userId);
      }
    }

    // ── Confessional (temp) ───────────────────────────────────────────────────
    match /tempConfessionalSessions/{userId} {
      allow read, write: if isOwner(userId);

      match /messages/{messageId} {
        allow get, list:  if isOwner(userId);
        allow create, update, delete: if isOwner(userId);
      }
    }

    // ── Misc collections you listed ───────────────────────────────────────────
    match /completedChallenges/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /freeAsk/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /subscriptions/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /challengeProofs/{docId} {
      allow create: if isSignedIn();
    }

    match /organizations/{orgId} {
      allow read: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid in resource.data.admins;
      allow create: if false;
    }

    // Static lookups
    match /regions/{regionId} {
      allow get, list: if isSignedIn();
      // Only allow incrementing userCount
      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount'])
        && request.resource.data.userCount is number;
    }
    match /religion/{religionId} {
      allow get, list: if isSignedIn();
      // Only allow incrementing userCount
      allow update: if isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount'])
        && request.resource.data.userCount is number;
    }

    // Public
    match /leaderboards/{docId} {
      allow read: if true;
    }
  }
}
