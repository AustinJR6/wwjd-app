rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- helpers ----
    function isSignedIn() { return request.auth != null; }
    function isAuthed() { return request.auth != null; }
    function isOwner(uid) { return isAuthed() && request.auth.uid == uid; }
    function isSubscribed(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.isSubscribed == true;
    }

    // ---------- USER ROOT ----------
    match /users/{userId} {

      // (unchanged) basic profile access
      // Allow any authenticated user to read basic profile info
      allow read: if request.auth != null;

      // CREATE: owner only, and may NOT include protected fields
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && !('subscription' in request.resource.data)
                    && !('entitlementsSnapshot' in request.resource.data);

      // UPDATE: owner only, and may NOT change protected fields
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && !request.resource.data.diff(resource.data)
                         .changedKeys()
                         .hasAny(['subscription','entitlementsSnapshot']);

      // DELETE: owner only
      allow delete: if request.auth != null && request.auth.uid == userId;

      // üìà Active challenge data (unchanged)
      match /activeChallenge/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // üí≥ Transactions (unchanged: server-only writes)
      match /transactions/{transactionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false;
      }

      // üß† Long-term memories (unchanged: server-only writes)
      match /memories/{memoryId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false;
      }

      // üßæ Session summaries (unchanged: server-only writes)
      match /session_summaries/{summaryId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false;
      }

      // üéØ Goals and preferences (unchanged: client write allowed)
      match /goals/{goalId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /preferences/{prefId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // üïäÔ∏è Religion chat messages directly under the user (unchanged)
      match /religionChats/{msgId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // ‚úÖ NEW: Unified chats namespace (subscription-gated WRITES only)
      // Read is owner-only (so paid users can read; free users won't be able to write/save)
        match /chats/{doc=**} {
          allow read: if request.auth != null && request.auth.uid == userId;
          allow write: if request.auth != null && request.auth.uid == userId &&
                       get(/databases/$(database)/documents/users/$(userId)).data.isSubscribed == true;
        }
    }

    // ---------- OTHER TOP-LEVEL COLLECTIONS (ALL UNCHANGED) ----------

    // Subcollections used for tracking (unchanged)
    match /{subCollection}/{docId} {
      allow read: if isSignedIn() && request.auth.uid == docId &&
        subCollection in ['confessionalSessions', 'journalEntries', 'dailyChallenges'];
    }

    // Journal entries (unchanged)
    match /journalEntries/{userId}/entries/{entryId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Religion chat history (unchanged)
    match /religionChats/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Temporary religion chat history (unchanged)
    match /tempReligionChat/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Temporary confessional sessions (unchanged)
    match /tempConfessionalSessions/{userId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Completed challenges (unchanged)
    match /completedChallenges/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Free ask cooldown (unchanged)
    match /freeAsk/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Subscription status mirror (unchanged)
    match /subscriptions/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Challenge proof submissions (unchanged)
    match /challengeProofs/{docId} {
      allow create: if isSignedIn();
    }

    // Organizations (unchanged)
    match /organizations/{orgId} {
      allow read: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid in resource.data.admins;
      allow create: if false;
    }

    // Regions (unchanged)
    match /regions/{regionId} {
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount']) &&
        request.resource.data.userCount is number;
    }

    // Religion lookup (unchanged)
    match /religion/{religionId} {
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['userCount']) &&
        request.resource.data.userCount is number;
    }

    // Leaderboards (unchanged; your original snippet cut off write rule‚Äîkeeping read open)
    match /leaderboards/{docId} {
      allow read: if true;
    }
  }
}
